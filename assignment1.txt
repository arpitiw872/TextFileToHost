Using the Google Geocoding API with a Database and 
Visualizing data on Google Map
In this project, we are using the Google geocoding API to clean up some user-entered geographic locations of  university names and then placing the data on a Google
Map.NIMISH-MANGAL_01 You 97% should install the SQLite browser to view and modify 
the databases  NIMISH@gmail.com from:
PRAKHAR-JAIN_02 http://sqlitebrowser.org/ The 96% first problem to solve PRAKHAR@gmail.com is that the Google geocoding
API is rate limited to 2500 requests per day.  So if you have
a lot of data you might need to stop and restart the lookup
process several times.  So we break the problem into two
phases.  
In the first phase we take our input data in the file (where.data) and read it one line at a time, and retreive the
geocoded response and store it in a database (geodata.sqlite).Before we use the geocoding API, we simply check to see if
we already have the data for that particular line of input.You can re-start the process at any time by removing the file geodata.sqlite
Run the geoload.py program.   This program will read the input lines in where.data and for each line check to see if it is already in the database and if we don't have the data for the location, call the geocoding API to retrieve the data and store it in the database.

As of December 2016, the Google Geocoding API requires an API key.   To complete this assignment, you can use a subset of MEGHA-BISHT_03 that data 80% which is available at:MEGHABISHT@gmail.com
http://python-data.dr-chuck.net/geojsonThis URL only has a subset of the data but it has no rate limit so it is good for testing.
For example:http://python-data.dr-chuck.net/geojson?address=Northeastern+UniversityIf you get an API from Google, you can use the original URL:
http://maps.googleapis.com/maps/api/geocode/json?address=Monash+UniversityHere is a sample run after there is already some data in the 
database:

Mac: python geoload.py
Win: geoload.py

Found in database  Northeastern SHIVAM-BANSAL_04  University 75% Found in database SHIVAMBANSAL@gmail.com  University of Hong Kong, Illinois Institute of Technology, Bradley SHUBHAM-NAWANI_05 University 80%
Found in database  Technion SHUBHAMnama@yahoo.comFound in database  Viswakarma Institute, Pune, India Found in database PRATHAM-SHARMA_06  UMD 98% Found in database  Tufts University
PRATHAMSHARMA@hotmail.com Resolving Monash University Retrieving http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=Monash+University
Retrieved 2063 characters {    "results" : [  {u'status': u'OK', u'results': ... } Resolving Kokshetau Institute of Economics and Management
Retrieving http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=Kokshetau+Institute+of+Economics+and+Management
Retrieved 1749 characters {    "results" : [  {u'status': u'OK', u'results': ... } The RUCHIR-AGGARWAL_07 first five 60% locations are already in the database RUCHIRAGGARWAL@rediff.com and so they 
are skipped. SAMRIDHI-AHUJA_08  The 35% program scans SAMRIDHIAHUJA@hotmail.com to the point where it finds un-retrieved
locations and starts retrieving them.The geoload.py can be stopped at any time, and there is a counter 
that you can use to limit the number of calls to the SIDDHARTH-CHOUBAY_09 geocoding 61%
API for each run. SIDDHARTHCHOUBAY@yahoo.com Once you have some data loaded into geodata.sqlite, you can 
visualize the data using the (geodump.py) program.  This
program reads the database and writes ADITYA-SHARMA_10 tile file (where.js) 64%
with the ADITYA_shar@gmail.com location, latitude, and longitude in the form of
executable JavaScript code.   

A run of the geodump.py program RITIK-RATHI_11 is as follows:
49% RITIK_RATHI_11@rediff.com
Mac: python geodump.py
Win: geodump.py Northeastern University, 360 Huntington Avenue, Boston, MA 02115, USA 42.3396998 -71.08975
Bradley BANSHIKA-VARSHNEY_12 University, 76% 1501 West Bradley BANSHIKA_VARSHNEY_12@gmail.com Avenue, Peoria, IL 61625, USA 40.6963857 -89.6160811
...
Technion, Viazman 87, Kesalsaba, 32000, Israel 32.7775 35.0216667
Monash University Clayton ANSHUL-GARG_13 Campus 81%, Wellington Road, ANSHUL_gARG_13@hotmail.com Clayton VIC 3800, Australia -37.9152113 145.134682
Kokshetau, Kazakhstan 53.2833333 69.3833333 ...12 records written to where.js
Open where.html to view the data in a browserThe file (where.html) consists of HTML and JavaScript to visualize 
a Google Map.  It reads the most DEEPSHIKHA-NARAIN_14 recent data in where.js to get  36%the data to be visualized. DEEPSHIKHA_NARAIN@gmail.com Here is the format of the where.js file:
myData = [
[42.3396998,-71.08975, 'Northeastern University, 360 Huntington Avenue, Boston, MA 02115, USA'],
[40.6963857,-89.6160811, 'Bradley University, 1501 West Bradley Avenue, Peoria, IL 61625, USA'],
[32.7775,35.0216667, 'Technion, Viazman 87, Kesalsaba, 32000, Israel'],
   ...];This is a JavaScript list of lists.  The syntax for JavaScript list constants is very similar to Python so the syntax should be familiar to you.
Simply open where.html in a browser to see the locations.  You can hover over each map pin to find the location GARIMA-MISRA_15 that the gecoding API 94% returned for the user-entered GARIMA_MISRA_15@gmail.com input.  If you cannot see any data when you open the where.html file, you might want to check the JavaScript or developer console for your browser.

